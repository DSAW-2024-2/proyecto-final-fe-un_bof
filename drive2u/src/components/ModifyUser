// src/components/ModifyUser.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom'; // useParams para obtener el ID del usuario
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function ModifyUser() {
  const navigate = useNavigate();
  const { userId } = useParams(); // Obtener el ID del usuario desde la URL

  const [formData, setFormData] = useState({
    userType: '',
    name: '',
    surName: '',
    universityID: '',
    email: '',
    phoneNumber: '',
    password: '',
    licensePlate: '',
    capacity: '',
    brand: '',
    model: '',
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Obtener los datos del usuario existente para llenar el formulario
    const fetchUserData = async () => {
      try {
        const response = await axios.get(`https://proyecto-final-be-un-bof.vercel.app/users/${userId}`);
        setFormData(response.data);
      } catch (error) {
        console.error('Error al obtener los datos del usuario:', error);
        toast.error('Error al obtener los datos del usuario.');
      }
    };
    fetchUserData();
  }, [userId]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    const data = {
      userType: formData.userType,
      name: formData.name,
      surName: formData.surName,
      universityID: formData.universityID,
      email: formData.email,
      phoneNumber: formData.phoneNumber,
      password: formData.password,
      licensePlate: formData.licensePlate,
      capacity: formData.capacity,
      brand: formData.brand,
      model: formData.model,
    };

    try {
      await axios.put(
        `https://proyecto-final-be-un-bof.vercel.app/users/${userId}`,
        data,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      toast.success('Usuario modificado exitosamente');
      setTimeout(() => {
        navigate('/dashboard');
      }, 1500);
    } catch (error) {
      console.error('Error al modificar el usuario:', error);
      if (error.response && error.response.data && error.response.data.message) {
        toast.error('Error al modificar el usuario: ' + error.response.data.message);
      } else if (error.message) {
        toast.error('Error al modificar el usuario: ' + error.message);
      } else {
        toast.error('Error al modificar el usuario: Ha ocurrido un error desconocido.');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 px-4">
      <div className="w-full max-w-xl p-8 bg-white rounded-lg shadow-2xl relative">
        <h2 className="mb-6 text-3xl font-bold text-center text-gray-800">
          Modificar Usuario
        </h2>
        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 gap-4 mb-4 sm:grid-cols-2">
            <div>
              <label className="block mb-2 font-semibold text-gray-700">Nombre</label>
              <input
                type="text"
                name="name"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                value={formData.name}
                onChange={handleChange}
                required
              />
            </div>
            <div>
              <label className="block mb-2 font-semibold text-gray-700">Apellido</label>
              <input
                type="text"
                name="surName"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                value={formData.surName}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          <div className="mb-4">
            <label className="block mb-2 font-semibold text-gray-700">Email</label>
            <input
              type="email"
              name="email"
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-2 font-semibold text-gray-700">Número de Teléfono</label>
            <input
              type="tel"
              name="phoneNumber"
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              value={formData.phoneNumber}
              onChange={handleChange}
              required
            />
          </div>
          {formData.userType === 'driver' && (
            <div className="mb-4">
              <label className="block mb-2 font-semibold text-gray-700">Placa del Vehículo</label>
              <input
                type="text"
                name="licensePlate"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                value={formData.licensePlate}
                onChange={handleChange}
                required
              />
            </div>
          )}
          <div className="flex justify-between">
            <button
              type="button"
              onClick={() => navigate('/dashboard')}
              className="px-6 py-2 font-semibold text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors duration-200"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-6 py-2 font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:bg-green-300"
              disabled={loading}
            >
              {loading ? 'Actualizando...' : 'Guardar Cambios'}
            </button>
          </div>
        </form>
      </div>
      <ToastContainer />
    </div>
  );
}

export default ModifyUser;
